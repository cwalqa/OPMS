<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Models\QuickbooksAdmin; 
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\Log;
use App\Services\PHPMailerService;

use Illuminate\Support\Carbon;
use Illuminate\Support\Str;

class AdminLoginController extends Controller
{
    protected $mailer;

    public function __construct(PHPMailerService $mailer)
    {
        $this->mailer = $mailer;
    }

    // Show the admin login form
    public function showLoginForm()
    {
        return view('auth.admin_login');
    }

    // Handle admin login
    public function login(Request $request)
    {
        // Validate admin credentials
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required|min:6',
        ]);

        $email = $credentials['email'];
        $maxAttempts = 5;
        $decayMinutes = 15;
        $key = 'admin_login_attempts:' . $email;

        // Rate limiting
        if (RateLimiter::tooManyAttempts($key, $maxAttempts)) {
            throw ValidationException::withMessages([
                'email' => ['Too many login attempts. Please try again after ' . RateLimiter::availableIn($key) . ' seconds.'],
            ]);
        }

        // Retrieve the admin
        $admin = QuickbooksAdmin::where('email', $email)->first();

        if ($admin && Hash::check($request->password, $admin->password)) {
            // Clear rate limit on successful login
            RateLimiter::clear($key);

            // Log the admin in
            Auth::guard('admin')->login($admin);

            // Store admin data securely in session
            $request->session()->put('admin', [
                'admin_id' => $admin->id,
                'display_name' => $admin->name,
                'email' => $admin->email,
            ]);

            // Generate a cryptographically secure, string-based 2FA code
            $twoFactorCode = Str::random(10); // More randomness with string-based code
            $hashedTwoFactorCode = Hash::make($twoFactorCode);
            $admin->two_factor_code = $hashedTwoFactorCode;
            $admin->two_factor_expires_at = now()->addMinutes(10);
            $admin->save();
            
            // Generate and send 2FA code
            // $twoFactorCode = rand(100000, 999999);
            // $admin->two_factor_code = $twoFactorCode;
            // $admin->two_factor_expires_at = now()->addMinutes(10);
            // $admin->save();

            // Send 2FA code via PHPMailer
            $subject = "CWI Admin Verification Code";
            $body = "Your two-factor authentication code is: $twoFactorCode";
            $this->mailer->send($admin->email, $subject, $body);


// Send 2FA code via PHPMailer using the Blade template
// $this->mailer->send(
//     $admin->email,
//     'Admin 2FA Verification Code',
//     'emails.two_factor_code', // Path to your 2FA blade template
//     ['twoFactorCode' => $twoFactorCode] // Data to pass to the view
// );


            // Redirect to the 2FA form
            return redirect()->route('admin.2fa');
        } else {
            // Log failed login attempt
            Log::warning('Failed admin login attempt for email: ' . $email);

            // Increment rate limiter
            RateLimiter::hit($key, $decayMinutes * 60);

            return back()->withErrors(['email' => 'The provided credentials do not match our records.'])
                         ->withInput($request->except('password'));
        }
    }

    // Show the admin 2FA form
    public function show2faForm()
    {
        return view('auth.admin_2fa');
    }

    // Handle 2FA verification
    // Handle 2FA verification
    public function verify2fa(Request $request)
    {
        // Rate limiting for 2FA verification attempts
        $maxAttempts = 5;
        $decayMinutes = 10;
        $key = '2fa_attempts:' . Auth::guard('admin')->user()->id;

        if (RateLimiter::tooManyAttempts($key, $maxAttempts)) {
            throw ValidationException::withMessages([
                'two_factor_code' => ['Too many 2FA attempts. Please try again after ' . RateLimiter::availableIn($key) . ' seconds.'],
            ]);
        }

        // Validate the 2FA code
        $request->validate([
            'two_factor_code' => 'required|string',
        ]);

        $admin = Auth::guard('admin')->user();

        if (Hash::check($request->two_factor_code, $admin->two_factor_code) && now()->lessThan($admin->two_factor_expires_at)) {
            // Clear rate limiter on successful 2FA verification
            RateLimiter::clear($key);

            // Clear the 2FA code and expiration
            $admin->two_factor_code = null;
            $admin->two_factor_expires_at = null;
            $admin->save();

            // Redirect to the admin dashboard
            return redirect()->route('admin.dashboard');
        }

        // Increment rate limiter for failed 2FA attempts
        RateLimiter::hit($key, $decayMinutes * 60);

        return back()->withErrors(['two_factor_code' => 'The 2FA code is incorrect or expired.']);
    }

    // Handle admin logout
    public function logout(Request $request)
    {
        // Log out the admin
        Auth::guard('admin')->logout();

        // Invalidate session
        $request->session()->invalidate();

        // Regenerate CSRF token
        $request->session()->regenerateToken();

        // Clear session data
        Session::flush();

        return redirect()->route('admin.login.form')->with('success', 'You have been logged out successfully.');
    }
}





















<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Models\QuickbooksAdmin; 
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\Log;
use App\Services\PHPMailerService;

use Illuminate\Support\Carbon;
use Illuminate\Support\Str;

class AdminLoginController extends Controller
{
    protected $mailer;

    public function __construct(PHPMailerService $mailer)
    {
        $this->mailer = $mailer;
    }

    // Show the admin login form
    public function showLoginForm()
    {
        return view('auth.admin_login');
    }

    // Handle admin login
    public function login(Request $request)
    {
        // Validate admin credentials
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required|min:6',
        ]);

        $email = $credentials['email'];
        $maxAttempts = 5;
        $decayMinutes = 15;
        $key = 'admin_login_attempts:' . $email;

        // Rate limiting
        if (RateLimiter::tooManyAttempts($key, $maxAttempts)) {
            throw ValidationException::withMessages([
                'email' => ['Too many login attempts. Please try again after ' . RateLimiter::availableIn($key) . ' seconds.'],
            ]);
        }

        // Retrieve the admin
        $admin = QuickbooksAdmin::where('email', $email)->first();

        if ($admin && Hash::check($request->password, $admin->password)) {
            // Clear rate limit on successful login
            RateLimiter::clear($key);

            // Log the admin in
            Auth::guard('admin')->login($admin);

            // Store admin data securely in session
            $request->session()->put('admin', [
                'admin_id' => $admin->id,
                'display_name' => $admin->name,
                'email' => $admin->email,
            ]);

            // Generate a cryptographically secure, string-based 2FA code
            // $twoFactorCode = Str::random(10); // More randomness with string-based code
            // $hashedTwoFactorCode = Hash::make($twoFactorCode);
            // $admin->two_factor_code = $hashedTwoFactorCode;
            // $admin->two_factor_expires_at = now()->addMinutes(10);
            // $admin->save();
            
            // Generate and send 2FA code
            $twoFactorCode = rand(100000, 999999);
            $admin->two_factor_code = $twoFactorCode;
            $admin->two_factor_expires_at = now()->addMinutes(10);
            $admin->save();

            // Send 2FA code via PHPMailer
            $subject = "CWI Admin Verification Code";
            $body = "Your two-factor authentication code is: $twoFactorCode";
            $this->mailer->send($admin->email, $subject, $body);


// Send 2FA code via PHPMailer using the Blade template
// $this->mailer->send(
//     $admin->email,
//     'Admin 2FA Verification Code',
//     'emails.two_factor_code', // Path to your 2FA blade template
//     ['twoFactorCode' => $twoFactorCode] // Data to pass to the view
// );


            // Redirect to the 2FA form
            return redirect()->route('admin.2fa');
        } else {
            // Log failed login attempt
            Log::warning('Failed admin login attempt for email: ' . $email);

            // Increment rate limiter
            RateLimiter::hit($key, $decayMinutes * 60);

            return back()->withErrors(['email' => 'The provided credentials do not match our records.'])
                         ->withInput($request->except('password'));
        }
    }

    // Show the admin 2FA form
    public function show2faForm()
    {
        return view('auth.admin_2fa');
    }

    // Handle 2FA verification
    // Handle 2FA verification
    public function verify2fa(Request $request)
    {
        // Rate limiting for 2FA verification attempts
        $maxAttempts = 5;
        $decayMinutes = 10;
        $key = '2fa_attempts:' . Auth::guard('admin')->user()->id;

        if (RateLimiter::tooManyAttempts($key, $maxAttempts)) {
            throw ValidationException::withMessages([
                'two_factor_code' => ['Too many 2FA attempts. Please try again after ' . RateLimiter::availableIn($key) . ' seconds.'],
            ]);
        }

        // Validate the 2FA code
        $request->validate([
            'two_factor_code' => 'required|numeric',
        ]);

        $admin = Auth::guard('admin')->user();

        if ($request->two_factor_code == $admin->two_factor_code && now()->lessThan($admin->two_factor_expires_at)) {
            

            // Clear the 2FA code and expiration
            $admin->resetTwoFactorCode();

            // Redirect to the admin dashboard
            return redirect()->route('admin.dashboard');
        }


        return back()->withErrors(['two_factor_code' => 'The 2FA code is incorrect or expired.']);
    }

    // Handle admin logout
    public function logout(Request $request)
    {
        // Log out the admin
        Auth::guard('admin')->logout();

        // Invalidate session
        $request->session()->invalidate();

        // Regenerate CSRF token
        $request->session()->regenerateToken();

        // Clear session data
        Session::flush();

        return redirect()->route('admin.login.form')->with('success', 'You have been logged out successfully.');
    }
}